#!/bin/env spartan-test
<?
//  
// https://github.com/parf/spartan-test
//
// HOMEBASE FRAMEWORK
// Mongo ORM v2
// https://github.com/parf/Mongo-PHP-ORM

include_once "init.php";
#=true

M::reset();
#=null

get_class(M());
#="MongoClient"

M("test.sequence");
#={"class":"M_Collection","0":{"name":"test.sequence","sdc":"test.sequence","server":""}}
M::Base();
#={"class":"M_TypedCollection","0":{"type":{"name_alias":["alias","name"],"name-alias":["alias","name"],"_id":"int"},"name":"test.base","sdc":"test.base","server":""}}

M::Base(1);
#={"class":"M_Object","0":{"id":1}}

count(M::listDatabases())>0;
#=true

// prepare clean playground for the test: drop old test databases (if there are any)
; M("test.sequence")->drop();
; $a_no=M("test.no_autoload");
; $a_no->drop();
; $a_id=M("test.id_autoload");
; $a_id->drop();
; $a_sf=M("test.sf_autoload");
; $a_sf->drop();
; M::Base()->drop();
; M::Typed()->drop();

// autoload testing - prepare collections
; $a_no->insert(["_id" => 1, "name" => "Parf", "age" => 38]);
; $a_id->insert(["_id" => 1, "name" => "Vikki", "age" => 0.6]);
; $a_sf->insert(["_id" => 1, "name" => "Ted", "age" => 6, "sex" => "male"]);  # some fields

// no auto load
$a_no->C("autoload");
#=""
; $c= $a_no->go(1);
$c->v(); // reveal internal details
#={"D":[],"id":1,"loaded":false}
$c->get("age");
#={"age":38}
$c->v();
#={"D":{"_id":1,"age":38},"id":1,"loaded":{"age":1,"_id":1}}
$c->name;
#="Parf"
$c->v(); // all data should be loaded
#={"D":{"_id":1,"name":"Parf","age":38},"id":1,"loaded":{"age":1,"_id":1,"name":1}}



// _id load
$a_id->C("autoload");
#="_id"
; $c= $a_id(1);
$c->v(); // autoloaded no useful fields, performed check for existance
#={"D":{"_id":1},"id":1,"loaded":{"_id":1}}
$c->id;  // object ID
#=1
$c->_id;  // mongo _id
#=1
$c->v();
#={"D":{"_id":1},"id":1,"loaded":{"_id":1}}
$c->name;
#="Vikki"
$c->v(); // all data loaded
#={"D":{"_id":1,"name":"Vikki"},"id":1,"loaded":{"_id":1,"name":1}}



// specific fields load
$a_sf->C("autoload");
#="name age mmm"
; $c= $a_sf(1);
$c->v();
#={"D":{"_id":1,"name":"Ted","age":6},"id":1,"loaded":{"name":1,"age":1,"mmm":1,"_id":1}}
$c->name;
#="Ted"
$c->v();
#={"D":{"_id":1,"name":"Ted","age":6},"id":1,"loaded":{"name":1,"age":1,"mmm":1,"_id":1}}
$c->age;
#=6
$c->v();
#={"D":{"_id":1,"name":"Ted","age":6},"id":1,"loaded":{"name":1,"age":1,"mmm":1,"_id":1}}
$c->mmm;  # autoloaded but non-existing field
#=null
$c->v();
#={"D":{"_id":1,"name":"Ted","age":6},"id":1,"loaded":{"name":1,"age":1,"mmm":1,"_id":1}}
$c->sex;  # non autloaded field
#="male"
$c->v();
#={"D":{"_id":1,"sex":"male","name":"Ted","age":6},"id":1,"loaded":{"name":1,"age":1,"mmm":1,"_id":1,"sex":1}}


// untyped operation testing
; M::Base()->insert(["_id" => 1, "name" => "base"]);
; M::Typed()->insert(["_id" => 1]);

in_array("test.no_autoload", M::listCollections("test"));
#=true

// basic functionality
get_class(M());
#="MongoClient"

get_class(M()->test);
#="MongoDB"

M("test.autoload");
#={"class":"M_Collection","0":{"name":"test.autoload","sdc":"test.autoload","server":""}}

$U=M::Base();
#={"class":"M_TypedCollection","0":{"type":{"name_alias":["alias","name"],"name-alias":["alias","name"],"_id":"int"},"name":"test.base","sdc":"test.base","server":""}}

$U->insert(["_id" => 100, "name" => "Parf", "test" => "yes", "wol" => 0.1, "x" => ["y" => "xy"]]);
#=100
$U->create(["_id" => 101, "name" => "Ted", "test" => "yes"]);
#={"class":"M_Object","0":{"id":101}}
$U->remove(102); // for not found exceptions
#=true

$U->one(100);
#=100
$U->one(100, "wol");
#=0.1
$U->one(100, "x.y");
#="xy"
$U->f(100, "wol name");
#={"100":{"_id":100,"name":"Parf","wol":0.1}}
$U[100];
#={"_id":100,"name":"Parf","test":"yes","wol":0.1,"x":{"y":"xy"}}
$U->C("parf");
#="custom-param"

$U->f(100, "name");
#={"100":{"_id":100,"name":"Parf"}}
$U->f(101);
#={"101":{"_id":101,"name":"Ted","test":"yes"}}
$U->f(["_id" => ['$gt' => 99, '$lt' => 102]]);
#={"100":{"_id":100,"name":"Parf","test":"yes","wol":0.1,"x":{"y":"xy"}},"101":{"_id":101,"name":"Ted","test":"yes"}}

isset($U[101]);
#=true

isset($U[102]);
#=false

$U[101]=["name" => "slash"];
#={"name":"slash"}

$U->findIn([100,101,102], "name");
#={"100":{"_id":100,"name":"Parf"},"101":{"_id":101,"name":"slash"}}

$U->lastId();
#=101

; $U->insert(["_id" => 1, "i" => 0, "f" => 0.0]);
; $U->inc(1, "i");
; $U->inc(1, "f", 0.5);
; $U->push(1, "a", "parf");
; $U->push(1, "a", "parf");
; $U->addToSet(1, "a", "parf");
; $U->addToSet(1, "a", "parf");
; $U->push(1, "a", "test");

; $U->add(1, "a1", "one");
; $U->add(1, "a2", "one", 3, 3.4);

count($U[100]);
#=5

$U;
#={"class":"M_TypedCollection","0":{"type":{"name_alias":["alias","name"],"name-alias":["alias","name"],"_id":"int"},"name":"test.base","sdc":"test.base","server":""}}


$U[1];
#={"_id":1,"a":["parf","parf","test"],"a1":["one"],"a2":["one",3,3.4],"f":0.5,"i":1,"name":"base"}

// simple goto
$U(1);
#={"class":"M_Object","0":{"id":1}}

# M_OBJECT 

; $parf=M::Base(100);
$parf->name;
#="Parf"

$parf=$U->findO(100)[100];
#={"class":"M_Object","0":{"id":100}}

// toString
"".$parf;
#="test.base[100]"


# no autoload
; $u101=M::Base(-101);
$u101->name;
#="Ted"

M::Base(102); // NotFound
#={"class":"M_Object","0":{"id":102}}


M::Base(-102); // Ok
#={"class":"M_Object","0":{"id":102}}

M::Base(-102)->name;
#=["NotFoundException","test.base[102]",0]

; $u101->reset(); // reset loaded fields cache
$u101->xxx="check";
#="check"

# get all fields shortcut
$u101->_;
#={"_id":101,"name":"slash","test":"yes","xxx":"check"}


; $u=M::Base(100);
$u->_;  // all fields
#={"_id":100,"name":"Parf","test":"yes","wol":0.1,"x":{"y":"xy"}}
$u["x"];
#={"y":"xy"}
; $u->x=123;
$u->reload()->x;
#=123
$u["a.b.c"]=[1,2,3];
#=[1,2,3]
$u->reload()->_;
#={"_id":100,"a":{"b":{"c":[1,2,3]}},"name":"Parf","test":"yes","wol":0.1,"x":123}
$u["a.b.c"];
#=[1,2,3]
$u["a.b"];
#={"c":[1,2,3]}
$u->a;
#={"b":{"c":[1,2,3]}}
; $u->y="y";
; $u->z=true;
$u->get("x y z");
#={"x":123,"y":"y","z":true}

# 3 syntax of unset
; $u->_unset("x");
; $u->_unset(["y"]);
; $u->_unset(["z"=>1]);
$u->get("x y z");
#={"x":null,"y":null,"z":null}

# $op testing
; $u->addToSet("x", "parf");
; $u->addToSet("x", "test");
; $u->addToSet("x", "parf");

$u->x;
#=["parf","test"]


### unset($u["x"]);  << no unset in eval !!
; $u->_unset("x");
$u->inc("x");
#={"class":"M_Object","0":{"id":100}}
$u->x;
#=1
; $u->inc("x", 5);
$u->x;
#=6
; $u->dec("x");
$u->x;
#=5
; $u->dec("x", 2);
$u->x;
#=3

; $u->push("y", 1);
$u->y;
#=[1]
; $u->push(["y" => 1, "z" => "z"]);
$u->get("y z");
#={"y":[1,1],"z":["z"]}
; $u->push(["y" => 2, "z" => "z"]);
$u->get("y z");
#={"y":[1,1,2],"z":["z","z"]}
; $u->push(["y" => 1, "z" => "y"]);
; $u->push(["y" => 3, "z" => "Z2"]);
$u->get("y z");
#={"y":[1,1,2,1,3],"z":["z","z","y","Z2"]}
; $u->pull("z", "z");
$u->z;
#=["y","Z2"]
; $u->pop("z");
$u->z;
#=["y"]

; $u->rename(["z" => "zz"]);
$u->get("zz z");
#={"z":null,"zz":["y"]}
#
$u->v();
#={"D":{"_id":100,"zz":["y"],"y":[1,1,2,1,3],"x":3,"a":{"b":{"c":[1,2,3]}},"name":"Parf","test":"yes","wol":0.1},"id":100,"loaded":{"zz":1,"z":1,"_id":1}}

$u->MC();
#={"class":"M_TypedCollection","0":{"type":{"name_alias":["alias","name"],"name-alias":["alias","name"],"_id":"int"},"name":"test.base","sdc":"test.base","server":""}}


$u->json();
#="{\"_id\":100,\"a\":{\"b\":{\"c\":[1,2,3]}},\"name\":\"Parf\",\"test\":\"yes\",\"wol\":0.1,\"x\":3,\"y\":[1,1,2,1,3],\"zz\":[\"y\"]}"


# FIELD ALIAS test
$u->name = "Parf";
#="Parf"
$u->name;
#="Parf"
$u->name_alias;
#="Parf"
$u->name;
#="Parf"
$u->name_alias = "Alias"; 
#="Alias"
$u->name;
#="Alias"
$u->name_alias;
#="Alias"
$u["name-alias"];
#="Alias"

$u->_undefined_magic_field;
#=["DomainException","type required for magic field test.base[100].undefined_magic_field",0]

// SEQUENCE
; $B = M::Base();
$b1=$B->insert(["a" => 1]);
#=102

$b2=$B->insert(["c" => 2]);
#=103

$B($b1)->_;
#={"_id":102,"a":1}

$B[$b2];
#={"_id":103,"c":2}

# ---------------------------------------------------------------------------------
# Typed collections

; $T=M::Typed();
$T->type;
#={"_id":"int","ai":["array","int"],"aip":["array","ip"],"arr":"array","array_of_ip":["alias","aip"],"as":["array","string"],"big_fat_int":["alias","int"],"date":"date","datetime":"DateTime","dt":"datetime","en":["enum",["name","age","sex"]],"int":"int","ip":"ip","map":["enum",{"y":"yksi","ka":"kaksi","ko":"kolme"}],"name":"name","ph":"phone","phone":["alias","ph"],"str":"string","t.a":"array","t.b":"bool","t.d":"date","t.f":"float","t.i":"int","t.ip":"ip","t.s":"string","text":"text","u":"url","usd":"price"}



; $T->insert( ["_id" => 2, "int" => 1] );
; $T->insert( ["_id" => 3, "int" => "a"] );
; $T->insert( ["_id" => 4, "int" => 1.1] );
; $T->insert( ["_id" => 5, "int" => true] );
; $T->insert( ["_id" => 6, "int" => false] );


$T->findIn([2,3,4,5,6]);
#={"2":{"_id":2,"int":1},"3":{"_id":3,"int":0},"4":{"_id":4,"int":1},"5":{"_id":5,"int":1},"6":{"_id":6,"int":0}}

; $T->insert( ["_id" => 7, "arr" => ["a"] ] );

// T->insert( ["_id" => 8, "arr" => "err"] );
// ERROR !!

; $T->insert( ["_id" => 9, "arr" => [1]] );

$T->findIn([7,8,9]);
#={"7":{"_id":7,"arr":["a"]},"9":{"_id":9,"arr":[1]}}

; $T->dotInsert( ["_id" => 10, "t.s" => 1, "t.i" => "str", "t.f" => 1.01, "t.d" => "1973-07-04"] );
$T[10];
#={"_id":10,"t":{"s":"1","i":0,"f":1.01,"d":110606400}}

// Date test
date("Y-m-d", $T(10)["t.d"]);
#="1973-07-04"

; $T->set(1, "int", "abc");
$T[1]["int"];
#=0
; $T->inc(1, "int", "1");
$T[1]["int"];
#=1
; $T->inc(1, "int", 1.9);
$T[1]["int"];
#=2

# *:int

; $T->push(1, "ai", "abc")->push(1, ["ai" => 0])->push(1, "ai", 1.1);
$T[1]["ai"];
#=[0,0,1]

# *:string
; $T->push(1, "as", "abc")->push(1, "as", 0)->push(1, "as", 1.1);
$T[1]["as"];
#=["abc","0","1.1"]

# *:ip
; $T->push(1, "aip", "192.168.0.1")->push(1, "aip", 3232235778);
$T[1]["aip"];
#=[3232235521,3232235778]

// Array of IP - magic representaition
$T(1)["_aip"];
#=["192.168.0.1","192.168.1.2"]

; $T->add(1, "aaa.b.c", 1, 2, 3);
// we need reload because we skipped M_Object layer in above line
$T(1)->reload()->aaa;
#={"b":{"c":[1,2,3]}}

$t=$T(1);
#={"class":"M_Object","0":{"id":1}}
// no reload, M_Object layer always work
; $t->add("aaa.b.d", 4, 5, 6);
$t->aaa;
#={"b":{"c":[1,2,3],"d":[4,5,6]}}

// ALIAS OF MAGIC FIELD - GET
; $t->int = 123456;
$t->big_fat_int;
#=123456
$t->_big_fat_int;
#="123,456"

// ALIAS OF MAGIC FIELD - SET

// assignment to an alias
; $t->big_fat_int = 1343;

$t->_big_fat_int;
#="1,343"
$t->int;
#=1343

// alias of int assignment
$t->_int = 1773;
#=1773
$t->int;
#=1773



; $t->_big_fat_int = "and the number is 987,000";
$t->int;
#=987000

// ENUMS - prederined hashes
get_class($T);
#="M_TypedCollection"
$T->type["en"];
#=["enum",["name","age","sex"]]

 M_Object::$debug=1;
#=1
; $t=$T(1);
$t->en=1;
#=1

// $t->v();

$t->D("en");
#=1

$t->en;
#=1

$t->en=4;
#=["InvalidArgumentException","bad enum key: 4 type: [ENUM]",0]
$t->en;
#=1
$t;
#={"class":"M_Object","0":{"id":1}}
$t->_en; // Magic Field
#="age"

// you can assign keys or values to enum types
$t->en="name";
#="name"

$t->en;
#=0
$t->_en="name";
#="name"
$t->en;
#=0
$t->_en="age";
#="age"
$t->en;
#=1
$t->en=["a"];
#=["InvalidArgumentException","scalar expected value type: string type: [ENUM]",0]

# ENUM AS MAP
$T->type["map"];
#=["enum",{"y":"yksi","ka":"kaksi","ko":"kolme"}]

// you can assign keys or values to enum types
$t->map="kolme";
#="kolme"
$t->map='ko';
#="ko"
$t->map;
#="ko"
$t->_map;
#="kolme"
; $t->map="ka";
$t->map;
#="ka"
$t->_map;  // Magic Field
#="kaksi"
$t->map="no-such-val";
#=["InvalidArgumentException","bad enum key: no-such-val type: [ENUM]",0]
$t->_map="nsv";
#=["InvalidArgumentException","bad enum VALUE: nsv",0]
$t->_map="ka";
#=["InvalidArgumentException","bad enum VALUE: ka",0]
$t->_map="kaksi";
#="kaksi"
$t->map;
#="ka"
$t->_map;
#="kaksi"


// MAGIC FIELDS

// INT TYPE
$T->type["int"];
#="int"
; $t->int = 1234567890;
$t->int;
#=1234567890
$t->_int;
#="1,234,567,890"

// STRING TYPE
$T->type["str"];
#="string"
; $t->str="<script> alert(\"got u\") </script>";
$t->str;
#="<script> alert(\"got u\") <\/script>"
$t->_str; // cross-site scripting protection
#="&lt;script&gt; alert(&quot;got u&quot;) &lt;\/script&gt;"

// TEXT TYPE
$T->type["text"];
#="text"
; $t->text="<script> alert(\"got u\") <\/script>";
$t->text; //  cross-site scripting protection
#="&lt;script&gt; alert(&quot;got u&quot;) &lt;\\\/script&gt;"

// URL TYPE
$T->type["u"];
#="url"
; $t->u="comfi.com";
$t->u;
#="comfi.com"
$t->_u;
#="http:\/\/comfi.com"

; $t->u="https://comfi.com";
$t->u;
#="https:\/\/comfi.com"

$t->u="one two three";
#=["InvalidArgumentException","bad url: one two three value type: string type: url",0]
$t->u;
#="https:\/\/comfi.com"

// no exception when saving bad urls to magic field
; $t->_u="one two three";
$t->u;
#=""

$t->_u;
#=""

// NAME TYPE
// capitalisation + sanitaze
; $t->name=" sergey parf 123 <script>";
$t->name;
#="Sergey Parf Script"

// DATE TYPE
; $t->date = 1337973872; // time();
date("Y-m-d H:i:s", 1337973872);
#="2012-05-25 15:24:32"
date("Y-m-d H:i:s", $t->date);
#="2012-05-25 00:00:00"
$t->date;
#=1337918400
$t->_date;
#="May 25, 2012"
$t->_date="05/25/2012";
#="05\/25\/2012"
$t->date;
#=1337918400
$t->_date;
#="May 25, 2012"
; $t->datetime = 1337973872; // time();
$t->datetime;
#=1337973872
$t->_datetime;
#="May 25, 2012 03:24PM"

# PHONE TYPE
$T->type["ph"];
#="phone"
; $t->ph=" 1 (617) 372 0000";
$t->ph;
#=16173720000
; $t->ph="011 1 (617) 372 0000";
$t->ph;
#=16173720000
; $t->ph="617-372-0000";
$t->ph;
#=16173720000
$t->_ph;
#="(617)372-0000"
#
# Bahamas (non US phone)
; $t->ph="12421221212";
$t->_ph;
#="+1242 122-1212"
#
; $t->ph="0074957260000";
$t->_ph;
#="+7 495-726-0000"
; $t->ph="+7 495 7260000";
$t->_ph;
#="+7 495-726-0000"
; $t->ph="+49 221 828 1234 ";
$t->_ph;
#="+49 221-828-1234"

; $t->ph="+86 21 5049 1234";
$t->_ph;
#="+86 215-049-1234"
; $t->ph="0086-755-83979813";
$t->_ph;
#="+86 7558-397-9813"

// IP field type

; $t->ip = "192.168.1.1";
$t->ip;
#=3232235777
$t->_ip;
#="192.168.1.1"
; $t->ip=3232235778;
$t->_ip;
#="192.168.1.2"

$t->_non_defined_field;
#=["DomainException","type required for magic field test.typed[1].non_defined_field",0]


// applying type for deep field
; $t["t.ip"] = "abc";
$t["t.ip"];
#=false
; $t["t.ip"] = 3232235778;
$t["t.ip"];
#=3232235778

// deep magic field
$t["_t.ip"];
#="192.168.1.2"

// deep magic arrays field
; $t["aip.0"] = 3232235778;
$t["aip.0"];
#=3232235778

// Magic field.{number} syntax is unsupported by type+magic system
// however you can explicitely define type to "aip.0", then it will work
// $t["_aip.0"];
// while inefficient - this syntax will work
$t["_aip"][0];
#="192.168.1.2"

// node.index notation
$t["_aip.0"];
#="192.168.1.2"

$t->_aip;
#=["192.168.1.2","192.168.1.2"]

// this syntax is supported
$t->_aip[0];
#="192.168.1.2"

// field.{number} this syntax is unsupported by type system
// ; $t["aip.1"] = '192.168.0.1'; // unsupported unless explicitely defined
// $t["aip.1"];
// #=3232235521


; $t["aip.1"] = M_Type::applyIP('10.0.0.1');
$t["aip.1"];
#=167772161


; $t->addToSet("aip", '192.168.1.1');
$t["aip.2"];
#=3232235777

// explicit "aip.2" type defined
$t["_aip.2"];
#="192.168.1.1"

$t->D("aip");
#=[3232235778,167772161,3232235777]

$t->aip;
#=[3232235778,167772161,3232235777]


// ALL FIELDS
$t->_;
#={"_id":1,"aaa":{"b":{"c":[1,2,3],"d":[4,5,6]}},"ai":[0,0,1],"aip":[3232235778,167772161,3232235777],"as":["abc","0","1.1"],"date":1337918400,"datetime":1337973872,"en":1,"int":1234567890,"ip":3232235778,"map":"ka","name":"Sergey Parf Script","ph":8675583979813,"str":"<script> alert(\"got u\") <\/script>","t":{"ip":3232235778},"text":"&lt;script&gt; alert(&quot;got u&quot;) &lt;\\\/script&gt;","u":""}


// ALL FIELDS as MAGIC
$t->__;
#={"_id":"1","aaa":{"b":{"c":[1,2,3],"d":[4,5,6]}},"ai":["0","0","1"],"aip":["192.168.1.2","10.0.0.1","192.168.1.1"],"as":["abc","0","1.1"],"date":"May 25, 2012","datetime":"May 25, 2012 03:24PM","en":"age","int":"1,234,567,890","ip":"192.168.1.2","map":"kaksi","name":"Sergey Parf Script","ph":"+86 7558-397-9813","str":"&lt;script&gt; alert(&quot;got u&quot;) &lt;\/script&gt;","t":{"ip":"192.168.1.2"},"text":"&lt;script&gt; alert(&quot;got u&quot;) &lt;\\\/script&gt;","u":""}


// Extending M_Object 
; $C =M::Something();
get_class($C);
#="M_TypedCollection"

$C->C("class");
#="M_Something"
; $C->remove(['_id' => ['$gt' => 0]]);
; $C->insert(["_id" => 1, "field" => "v"]);
; $C->insert(["_id" => 2, "class" => "Car", "kmh" => 100]);
; $C->insert(["_id" => 3, "class" => "Manager", "name" => "Bob"]);
; $C->insert(["_id" => 4, "class" => "Person", "name" => "Jim", "m_id" => 3]);
; $C->insert(["_id" => 5, "class" => "Person", "name" => "Tucker", "m_id" => 3]);

// custom static methods from M_Object are mapped to collection
$C->static_finder("abc");
#=["static M_Object methods are mapped to M_Collection methods","param: abc"]

$c=$C(1);
#={"class":"M_Something","0":{"id":1}}
$c->name();
#="Something"
$c->doit();
#="some business function associated with collection"

# custom class instantiation example
$c=$C(2);
#={"class":"M_Car","0":{"id":2}}
$c->name();
#="Car"
$c->doit();
#="some business function associated with collection"

$c->kmh;
#=100
$c->mph;
#=62.14

// real field assignment
; $c->kmh=200;
$c->mph;
#=124.27

// calc field assignment
; $c->mph=100;
$c->kmh;
#=160.93

$c=$C(3);
#={"class":"M_Manager","0":{"id":3}}
$c->name();
#="Manager Bob"
$c->doit();
#="Do it yourself, i am the one who tells u what to do"
; $c->password="google";
$c->password;
#="99429818bcabda5df392684be63fab78"

// Relation "has-many"
$c->Subordinates;
#={"4":{"_id":4,"class":"Person","name":"Jim","m_id":3},"5":{"_id":5,"class":"Person","name":"Tucker","m_id":3}}

$c=$C(4);
#={"class":"M_Person","0":{"id":4}}
$c->name();
#="Person Jim"
$c->doit();
#="Jawohl"

// Relation "has-one"
$c->Manager;
#={"class":"M_Manager","0":{"id":3}}
$c->Manager->name;
#="Bob"

// M_Object Static methods are mapped to Collection methods
$C->static_finder("my complex param");
#=["static M_Object methods are mapped to M_Collection methods","param: my complex param"]




// TypedCollection magic fields query support

; $T = M::Typed();  // typed collection
$T->type["ph"];     // phone type field
#="phone"
; M_Sequence::set("".$T, 100);

; $T->insert(["ph" => "(617) 372-0000"]);
; $T->insert(["ph" => "7 495 726-0000"]);
; $T->insert(["ph" => "+49 221 828 1234"]);

// query all phone fields
$T->f(['ph' => ['$exists' => true]], "ph");    
#={"1":{"_id":1,"ph":8675583979813},"101":{"_id":101,"ph":16173720000},"102":{"_id":102,"ph":74957260000},"103":{"_id":103,"ph":492218281234}}
// Find as Objects - Object List
$ol = $T->fo(['ph' => ['$exists' => true]]);    
#={"1":{"id":1},"101":{"id":101},"102":{"id":102},"103":{"id":103}}

$ol[101]->_ph;
#="(617)372-0000"
$ol[102]->_ph;
#="+7 495-726-0000"
$ol[103]->_ph;
#="+49 221-828-1234"

// Magic
// $T->fm([], []);
//; $T->fm([], "_ph");    

